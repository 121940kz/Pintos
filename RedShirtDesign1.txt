CIS 520 - Programming Project #1
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Heath Yates <hlyates@ksu.edu>,
Emily Jordan <Delamern@gmail.com>,
Denise Case <denisecase@gmail.com>
...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.

Bryant & O'Hallaron, Computer Systems: A Programmer's Perspective.
Kernighan & Ritchie, The C Programming Language, Second Edition. 
Love, et al, Beginning Unix.
Petzold, Code: The Hidden Langauge of Computer Hardware and Software.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


static struct list wait_list; 
The wait_list maintains a list of all threads waiting, sorted by the 
thread's wakeup time.

struct lock wait_list_lock;  
The wait_list_lock is used to protect wait_list access, so that only
one thread can be updating the list at any time.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

We get a pointer to the current thread and set the current thread's 
wakeup time to the current time plus the ticks passed in. We aquire 
a lock, disable interrupts, insert the thread into a wait list 
ordered by wakeup time, re-enable interrupts, release the lock, 
and down the wait semaphore on the current thread, blocking it 
until the timer interrupt handler unblocks it (after the required 
delay has passed).

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

To minimize the amount of time spent in the timer interrupt handler, 
the wait list is maintained in sorted order.  If the wait list is 
empty or the first element is not due to be woken, the timer interrupt 
immediately moves to incrementing the time and calling the thread_tick 
function.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Race conditions are avoided when multiple threads call timer_sleep() 
simultaneously by aquiring a lock before the critical section of the 
code. Only one thread will be allowed in the critical section (disable 
interrupts, insert into list, re-enable interrupts) at a time.  Any 
other threads will have to wait until the lock is released before they 
can access the critical section. 


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Race conditions are avoided when a timer interrupt occurs by disabling 
interrupts immediately before insertion into the shared wait_list and 
re-enabling interrupts again immediately after the list is updated.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
